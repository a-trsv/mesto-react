{"version":3,"sources":["images/logo.svg","components/Header.js","utils/api.js","contexts/CurrentUserContext.js","components/Card.js","components/Main.js","components/Footer.js","components/PopupWithForm.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/ImagePopup.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","headerLogo","alt","api","options","this","_address","address","_groupId","groupId","_token","token","fetch","headers","authorization","then","res","_checkServerResponse","inputName","name","inputJob","about","method","body","JSON","stringify","inputSRC","link","cardId","isLiked","setLike","deleteLike","userData","avatar","ok","json","Promise","reject","status","CurrentUserContext","React","createContext","Card","card","onCardClick","onCardLike","onCardDelete","currentUser","useContext","isOwn","owner","_id","cardDeleteButtonClassName","likes","some","i","cardLikeButtonClassName","onClick","aria-label","type","length","Main","props","useState","cards","setCards","handleCardLike","changeLikeCardStatus","newCard","state","map","c","catch","err","console","log","handleCardDelete","deleteCard","filter","useEffect","getCards","apiData","onEditAvatar","onEditProfile","onAddPlace","Footer","Date","getFullYear","PopupWithForm","isOpen","title","onSubmit","noValidate","children","saveButton","onClose","EditProfilePopup","setName","description","setDescription","e","preventDefault","onUpdateUser","id","placeholder","minLength","maxLength","required","onChange","evt","target","value","EditAvatarPopup","userAvatarRef","useRef","onUpdateAvatar","current","ref","ImagePopup","App","isEditAvatarPopupOpen","setEditAvatarPopupOpen","isEditProfilePopupOpen","setEditProfilePopupOpen","isAddPlacePopupOpen","setAddPlacePopupOpen","isImagePopupOpen","setImagePopupOpen","selectedCard","setSelectedCard","setCurrentUser","closeAllPopups","getUserInfo","Provider","patchUserInfo","patchUserAvatar","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0KAAe,MAA0B,iC,OCU1BA,MARf,WACI,OACA,wBAAQC,UAAU,SAAlB,SACE,qBAAKA,UAAU,eAAeC,IAAKC,EAAYC,IAAI,mG,cCqH1CC,EANH,I,WAnHR,WAAYC,GAAU,oBAClBC,KAAKC,SAAWF,EAAQG,QACxBF,KAAKG,SAAWJ,EAAQK,QACxBJ,KAAKK,OAASN,EAAQO,M,+CAE1B,WAAe,IAAD,OACV,OAAOC,MAAM,GAAD,OAAIP,KAAKC,SAAT,YAAqBD,KAAKG,SAA1B,aAA+C,CACvDK,QAAS,CACLC,cAAeT,KAAKK,OACpB,eAAgB,sBAGnBK,MAAK,SAAAC,GAAG,OAAI,EAAKC,qBAAqBD,Q,2BAG/C,YAAqD,IAAD,OAA9BE,EAA8B,EAApCC,KAAwBC,EAAY,EAAnBC,MAC7B,OAAOT,MAAM,GAAD,OAAIP,KAAKC,SAAT,YAAqBD,KAAKG,SAA1B,aAA+C,CACvDc,OAAQ,QACRT,QAAS,CACLC,cAAeT,KAAKK,OACpB,eAAgB,oBAEpBa,KAAMC,KAAKC,UAAU,CACjBN,KAAMD,EACNG,MAAOD,MAGVL,MAAK,SAAAC,GAAG,OAAI,EAAKC,qBAAqBD,Q,sBAG/C,WAAY,IAAD,OACP,OAAOJ,MAAM,GAAD,OAAIP,KAAKC,SAAT,YAAqBD,KAAKG,SAA1B,UAA4C,CACpDK,QAAS,CACLC,cAAeT,KAAKK,OACpB,eAAgB,sBAGnBK,MAAK,SAAAC,GAAG,OAAI,EAAKC,qBAAqBD,Q,sBAG/C,YAA+C,IAAD,OAA7BE,EAA6B,EAAnCC,KAAuBO,EAAY,EAAlBC,KACxB,OAAOf,MAAM,GAAD,OAAIP,KAAKC,SAAT,YAAqBD,KAAKG,SAA1B,UAA4C,CACpDc,OAAQ,OACRT,QAAS,CACLC,cAAeT,KAAKK,OACpB,eAAgB,oBAEpBa,KAAMC,KAAKC,UAAU,CACjBN,KAAMD,EACNS,KAAMD,MAGTX,MAAK,SAAAC,GAAG,OAAI,EAAKC,qBAAqBD,Q,wBAG/C,SAAWY,GAAS,IAAD,OACf,OAAOhB,MAAM,GAAD,OAAIP,KAAKC,SAAT,YAAqBD,KAAKG,SAA1B,kBAA4CoB,GAAU,CAC9DN,OAAQ,SACRT,QAAS,CACLC,cAAeT,KAAKK,UAGvBK,MAAK,SAAAC,GAAG,OAAI,EAAKC,qBAAqBD,Q,kCAG/C,SAAqBY,EAAQC,GACzB,OAAKA,EAGMxB,KAAKyB,QAAQF,GAFbvB,KAAK0B,WAAWH,K,qBAM/B,SAAQA,GAAS,IAAD,OACZ,OAAOhB,MAAM,GAAD,OAAIP,KAAKC,SAAT,YAAqBD,KAAKG,SAA1B,wBAAkDoB,GAAU,CACpEN,OAAQ,MACRT,QAAS,CACLC,cAAeT,KAAKK,UAGvBK,MAAK,SAAAC,GAAG,OAAI,EAAKC,qBAAqBD,Q,wBAG/C,SAAWY,GAAS,IAAD,OACf,OAAOhB,MAAM,GAAD,OAAIP,KAAKC,SAAT,YAAqBD,KAAKG,SAA1B,wBAAkDoB,GAAU,CACpEN,OAAQ,SACRT,QAAS,CACLC,cAAeT,KAAKK,UAGvBK,MAAK,SAAAC,GAAG,OAAI,EAAKC,qBAAqBD,Q,6BAE/C,SAAgBgB,GAAW,IAAD,OACtB,OAAOpB,MAAM,GAAD,OAAIP,KAAKC,SAAT,YAAqBD,KAAKG,SAA1B,oBAAsD,CAC9Dc,OAAQ,QACRT,QAAS,CACLC,cAAeT,KAAKK,OACpB,eAAgB,oBAEpBa,KAAMC,KAAKC,UAAU,CACjBQ,OAAQD,EAASC,WAGpBlB,MAAK,SAAAC,GAAG,OAAI,EAAKC,qBAAqBD,Q,kCAG/C,SAAqBA,GACjB,OAAIA,EAAIkB,GACGlB,EAAImB,OAGRC,QAAQC,OAAR,UAAkBrB,EAAIsB,a,KAIzB,CAAQ,CAChB/B,QAAS,oCACTE,QAAS,YACTE,MAAO,yCCnHE4B,EAAqBC,IAAMC,gBC0CzBC,MA3Cf,YAAgE,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,aACrCC,EAAcP,IAAMQ,WAAWT,GAE/BU,EAAQN,EAAKO,MAAMC,MAAQJ,EAAYI,IAEvCC,EAAyB,iCACDH,EAAQ,GAAK,sCAGrCpB,EAAUc,EAAKU,MAAMC,MAAK,SAAAC,GAAC,OAAIA,EAAEJ,MAAQJ,EAAYI,OAErDK,EAAuB,+BACD3B,EAAU,8BAAgC,IAetE,OACI,0BAAS9B,UAAU,UAAnB,UACI,wBAAQ0D,QANhB,WACIX,EAAaH,IAK2Be,aAAW,8FAAmBC,KAAK,SAAS5D,UAAWqD,IAC3F,qBAAKK,QAfb,WACIb,EAAYD,IAcmB5C,UAAU,iBAAiBC,IAAK2C,EAAKhB,KAAMzB,IAAG,2FAAqByC,EAAKxB,QACnG,sBAAKpB,UAAU,iBAAf,UACI,oBAAIA,UAAU,iBAAd,SAAgC4C,EAAKxB,OACrC,sBAAKpB,UAAU,qBAAf,UACI,wBAAQ0D,QAfxB,WACIZ,EAAWF,IAcmCe,aAAW,2GAAsBC,KAAK,SACpE5D,UAAWyD,IACf,sBAAMzD,UAAU,sBAAhB,SAAuC4C,EAAKU,MAAMO,mBCqEvDC,MAvGf,SAAcC,GAKV,MAA0BtB,IAAMuB,SAAS,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACMlB,EAAcP,IAAMQ,WAAWT,GAErC,SAAS2B,EAAevB,GAEpB,IAAMd,EAAUc,EAAKU,MAAMC,MAAK,SAAAC,GAAC,OAAIA,EAAEJ,MAAQJ,EAAYI,OAE3DhD,EAAIgE,qBAAqBxB,EAAKQ,KAAMtB,GAC/Bd,MAAK,SAACqD,GACHH,GAAS,SAACI,GAAD,OAAWA,EAAMC,KAAI,SAACC,GAAD,OAAOA,EAAEpB,MAAQR,EAAKQ,IAAMiB,EAAUG,WAEvEC,OAAM,SAACC,GACJC,QAAQC,IAAIF,MAIxB,SAASG,EAAiBjC,GACtBxC,EAAI0E,WAAWlC,EAAKQ,KACfpC,MAAK,WACFkD,GAAS,SAACI,GAAD,OAAWA,EAAMS,QAAO,SAACP,GAAD,OAAOA,IAAM5B,WAEjD6B,OAAM,SAACC,GACJC,QAAQC,IAAIF,MA4BxB,OAXAjC,IAAMuC,WAAU,WACZ5E,EAAI6E,WACCjE,MAAK,SAACkE,GACHhB,EAASgB,MAEZT,OAAM,SAACC,GACJC,QAAQC,IAAIF,QAErB,IAIC,iCACI,0BAAS1E,UAAU,UAAnB,UACI,sBAAKA,UAAU,qBAAf,UACI,sBAAKA,UAAU,yBAAf,UACI,qBAAKA,UAAU,kBAAkBG,IAAI,uCAASF,IAAK+C,EAAYd,OAAQwB,QAASK,EAAMoB,eACtF,wBACInF,UAAU,gBACV4D,KAAK,SACLD,aAAW,sHAInB,sBAAK3D,UAAU,gBAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,oBAAIA,UAAU,iBAAd,SAAgCgD,EAAY5B,OAC5C,wBACIuC,aAAW,wFACXC,KAAK,SACL5D,UAAU,uBACV0D,QAASK,EAAMqB,mBAGvB,mBAAGpF,UAAU,mBAAb,SAAiCgD,EAAY1B,cAGrD,wBACIqC,aAAW,8HACXC,KAAK,SACL5D,UAAU,sBACV0D,QAASK,EAAMsB,gBAGvB,yBAASrF,UAAU,WAAnB,SACKiE,EAAMM,KAAI,SAAA3B,GAAI,OACX,cAAC,EAAD,CAEIA,KAAMA,EACNC,YAAakB,EAAMlB,YACnBC,WAAYqB,EACZpB,aAAc8B,GAJTjC,EAAKQ,cCxFnBkC,MARf,WACI,OACI,wBAAQtF,UAAU,SAAlB,SACI,oBAAGA,UAAU,oBAAb,mBAAyC,IAAIuF,MAAOC,cAApD,sBCoBGC,MArBf,SAAuB1B,GACnB,OACI,qBAAK/D,UAAS,gBAAW+D,EAAM2B,QAAU,gBAAzC,SACI,sBAAK1F,UAAU,mBAAf,UACI,oBAAIA,UAAU,eAAd,SAA8B+D,EAAM4B,QACpC,uBACIvE,KAAM2C,EAAM3C,KACZpB,UAAS,yBAAoB+D,EAAM3C,MACnCwE,SAAU7B,EAAM6B,SAChBC,YAAU,EAJd,UAMK9B,EAAM+B,SACP,wBAAQlC,KAAK,SAAS5D,UAAU,oBAAhC,SAAqD+D,EAAMgC,gBAE/D,wBAAQrC,QAASK,EAAMiC,QAASrC,aAAW,0GAAqBC,KAAK,SACjE5D,UAAS,uDAAkD+D,EAAM3C,cC4DtE6E,MAzEf,SAA0BlC,GAEtB,MAAwBtB,IAAMuB,SAAS,IAAvC,mBAAO5C,EAAP,KAAa8E,EAAb,KACA,EAAsCzD,IAAMuB,SAAS,IAArD,mBAAOmC,EAAP,KAAoBC,EAApB,KAGMpD,EAAcP,IAAMQ,WAAWT,GA4BrC,OAxBAC,IAAMuC,WAAU,WACZkB,EAAQlD,EAAY5B,MACpBgF,EAAepD,EAAY1B,SAC5B,CAAC0B,IAsBA,eAAC,EAAD,CACI5B,KAAK,OACLuE,MAAM,4HACND,OAAQ3B,EAAM2B,OACdM,QAASjC,EAAMiC,QACfJ,SAzBR,SAAsBS,GAElBA,EAAEC,iBAGFvC,EAAMwC,aAAa,CACfnF,KAAMA,EACNE,MAAO6E,KAmBPJ,WAAW,yDANf,UAQI,uBACInC,KAAK,OAAO4C,GAAG,YAAYpF,KAAK,YAChCqF,YAAY,yFACZzG,UAAU,oCACV0G,UAAW,EAAGC,UAAW,GAAIC,UAAQ,EACrCC,SAtBZ,SAA0BC,GACtBZ,EAAQY,EAAIC,OAAOC,UAuBf,sBAAMhH,UAAU,cAAcwG,GAAG,oBACjC,uBAAO5C,KAAK,OAAO4C,GAAG,WAAWpF,KAAK,WAClCqF,YAAY,yFACZzG,UAAU,mCACV0G,UAAW,EAAGC,UAAW,IAAKC,UAAQ,EACtCC,SAzBZ,SAAyBC,GACrBV,EAAeU,EAAIC,OAAOC,UAyBtB,sBAAMhH,UAAU,cAAcwG,GAAG,uBC3B9BS,MA9Bf,SAAyBlD,GAErB,IAAMmD,EAAgBzE,IAAM0E,OAAO,IAUnC,OACI,eAAC,EAAD,CACI/F,KAAK,SACLuE,MAAM,wFACND,OAAQ3B,EAAM2B,OACdM,QAASjC,EAAMiC,QACfD,WAAW,yDACXH,SAfR,SAAsBkB,GAClBA,EAAIR,iBACJvC,EAAMqD,eAAe,CACjBlF,OAAQgF,EAAcG,QAAQL,SAMlC,UAQI,uBAAOM,IAAKJ,EAAetD,KAAK,MAAM4C,GAAG,cACrCpF,KAAK,cAAcqF,YAAY,qGAC/BzG,UAAU,yCACV4G,UAAQ,IACZ,sBAAM5G,UAAU,cAAcwG,GAAG,0BCZ9Be,MAdf,YAA8C,IAAzB3E,EAAwB,EAAxBA,KAAM8C,EAAkB,EAAlBA,OAAQM,EAAU,EAAVA,QAC/B,OACI,qBAAKhG,UAAS,gBAAW4C,GAAQ8C,EAAS,eAAiB,IAA3D,SACI,sBAAK1F,UAAU,+CAAf,UACI,qBAAKA,UAAU,eAAeC,IAAG,UAAK2C,EAAKhB,MAAQzB,IAAG,0FAAoByC,EAAKxB,QAC/E,oBAAIpB,UAAU,uCAAd,SAAsD4C,EAAKxB,OAC3D,wBAAQsC,QAASsC,EACbrC,aAAW,6HAAyBC,KAAK,SACzC5D,UAAU,6DCwKfwH,MAtKf,WAEI,MAAwD/E,IAAMuB,UAAS,GAAvE,mBAAOyD,EAAP,KAA8BC,EAA9B,KACA,EAA0DjF,IAAMuB,UAAS,GAAzE,mBAAO2D,EAAP,KAA+BC,EAA/B,KACA,EAAoDnF,IAAMuB,UAAS,GAAnE,mBAAO6D,EAAP,KAA4BC,EAA5B,KACA,EAA8CrF,IAAMuB,UAAS,GAA7D,mBAAO+D,EAAP,KAAyBC,EAAzB,KACA,EAAwCvF,IAAMuB,SAAS,IAAvD,mBAAOiE,EAAP,KAAqBC,EAArB,KACA,EAAsCzF,IAAMuB,SAAS,IAArD,mBAAOhB,EAAP,KAAoBmF,EAApB,KAsDA,SAASC,IACLV,GAAuB,GACvBE,GAAwB,GACxBE,GAAqB,GACrBE,GAAkB,GAClBE,EAAgB,IAGpB,OA5DAzF,IAAMuC,WAAU,WACZ5E,EAAIiI,cACCrH,MAAK,SAACiB,GACHkG,EAAelG,MAGlBwC,OAAM,SAACC,GACJC,QAAQC,IAAIF,QAErB,IAoDC,qBAAK1E,UAAU,gBAAf,SACI,eAACwC,EAAmB8F,SAApB,CAA6BtB,MAAOhE,EAApC,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CACIoC,cA1BhB,WACIwC,GAAwB,IA0BZvC,WAvBhB,WACIyC,GAAqB,IAuBT3C,aAhChB,WACIuC,GAAuB,IAgCX7E,YArBhB,SAAyBD,GACrBsF,EAAgBtF,GAChBoF,GAAkB,MAqBV,cAAC,EAAD,IACA,cAAC,EAAD,CACItC,OAAQiC,EACRpB,aA9DhB,SAA0BtE,GACtB7B,EAAImI,cAActG,GACbjB,MAAK,SAACiB,GACHkG,EAAelG,GAEfmG,OAEH3D,OAAM,SAACC,GACJC,QAAQC,IAAIF,OAuDRsB,QAASoC,IAsBb,cAAC,EAAD,CACIhH,KAAK,MACLuE,MAAM,gEACND,OAAQmC,EACR7B,QAASoC,EACTtC,SACI,qCACI,uBAAOlC,KAAK,OAAO4C,GAAG,gBAAgBpF,KAAK,gBACvCqF,YAAY,mDAAWzG,UAAU,wCACjC0G,UAAW,EAAGC,UAAW,GAAIC,UAAQ,IACzC,sBAAM5G,UAAU,cAAcwG,GAAG,wBACjC,uBAAO5C,KAAK,MAAM4C,GAAG,WAAWpF,KAAK,WACjCqF,YAAY,qGAAqBzG,UAAU,sCAAsC4G,UAAQ,IAC7F,sBAAM5G,UAAU,cAAcwG,GAAG,sBAGzCT,WAAW,2DAGf,cAAC,EAAD,CACI3E,KAAK,SACLuE,MAAM,2DACNK,QAASoC,EACTtC,SACI,6BAGJC,WAAW,iBAGf,cAAC,EAAD,CACIL,OAAQ+B,EACRL,eAzGhB,SAA4BnF,GACxB7B,EAAIoI,gBAAgBvG,GACfjB,MAAK,SAACiB,GACHkG,EAAelG,GAEfmG,OAEH3D,OAAM,SAACC,GACJC,QAAQC,IAAIF,OAkGRsB,QAASoC,IAkBb,cAAC,EAAD,CACIxF,KAAMqF,EACNvC,OAAQqC,EACR/B,QAASoC,UC/JdK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3H,MAAK,YAAkD,IAA/C4H,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.c9104730.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.03b78ada.svg\";","import headerLogo from '../images/logo.svg'\n\nfunction Header() {\n    return (\n    <header className=\"header\">\n      <img className=\"header__logo\" src={headerLogo} alt=\"Логотип сервиса Mesto\"/>\n    </header>\n    )\n}\n\nexport default Header","class Api {\n    constructor(options) {\n        this._address = options.address\n        this._groupId = options.groupId\n        this._token = options.token\n    }\n    getUserInfo() {\n        return fetch(`${this._address}/${this._groupId}/users/me`, {\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    patchUserInfo({ name: inputName, about: inputJob }) {\n        return fetch(`${this._address}/${this._groupId}/users/me`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: inputName,\n                about: inputJob,\n            })\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    getCards() {\n        return fetch(`${this._address}/${this._groupId}/cards`, {\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n    \n    postCard({ name: inputName, link: inputSRC }) {\n        return fetch(`${this._address}/${this._groupId}/cards`, {\n            method: 'POST',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: inputName,\n                link: inputSRC\n            })\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this._address}/${this._groupId}/cards/${cardId}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._token,\n            }\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    changeLikeCardStatus(cardId, isLiked) {\n        if (!isLiked) {\n            return this.deleteLike(cardId);\n        } else {\n            return this.setLike(cardId);\n        }\n    }\n\n    setLike(cardId) {\n        return fetch(`${this._address}/${this._groupId}/cards/likes/${cardId}`, {\n            method: 'PUT',\n            headers: {\n                authorization: this._token,\n            }\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n    \n    deleteLike(cardId) {\n        return fetch(`${this._address}/${this._groupId}/cards/likes/${cardId}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._token,\n            }\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n    patchUserAvatar(userData) {\n        return fetch(`${this._address}/${this._groupId}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: userData.avatar\n            })\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    _checkServerResponse(res) {\n        if (res.ok) {\n            return res.json()\n        }\n        // Если происходит ошибка, отклоняем промис\n        return Promise.reject(`${res.status}`)\n    }\n}\n\nconst api = new Api({\n    address: 'https://mesto.nomoreparties.co/v1',\n    groupId: 'cohort-24',\n    token: '4d34d552-bc81-44cb-b18a-2296a1ced45f'\n})\n\nexport default api","import React from 'react'\n\n// Экспортируе новый объект контекста\n\nexport const CurrentUserContext = React.createContext();","import React from 'react'\nimport { CurrentUserContext } from '../contexts/CurrentUserContext'\n\nfunction Card({ card, onCardClick, onCardLike, onCardDelete }) {\n    const currentUser = React.useContext(CurrentUserContext);\n    // Определяем, являемся ли мы владельцем текущей карточки\n    const isOwn = card.owner._id === currentUser._id;\n    // Создаём переменную, которую после зададим в `className` для кнопки удаления\n    const cardDeleteButtonClassName = (\n        `element__delete-button ${isOwn ? '' : 'element__delete-button_type_hidden'}`\n    );\n    // Определяем, есть ли у карточки лайк, поставленный текущим пользователем\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n    // Создаём переменную, которую после зададим в `className` для кнопки лайка\n    const cardLikeButtonClassName = (\n        `element__like-button ${isLiked ? 'element__like-button_active' : ''}`\n    );\n\n    function handleClick() {\n        onCardClick(card);\n    }\n\n    function handleLikeClick() {\n        onCardLike(card)\n    }\n\n    function handleDeleteClick() {\n        onCardDelete(card)\n    }\n\n    return (\n        <article className=\"element\">\n            <button onClick={handleDeleteClick} aria-label=\"Удалить карточку\" type=\"button\" className={cardDeleteButtonClassName} />\n            <img onClick={handleClick} className=\"element__image\" src={card.link} alt={`Крупным планом: ${card.name}`} />\n            <div className=\"element__place\">\n                <h2 className=\"element__title\">{card.name}</h2>\n                <div className=\"element__like-area\">\n                    <button onClick={handleLikeClick} aria-label=\"Оцените фотографию!\" type=\"button\"\n                        className={cardLikeButtonClassName} />\n                    <span className=\"element__like-count\">{card.likes.length}</span>\n                </div>\n            </div>\n        </article>\n    )\n}\n\nexport default Card","import React from 'react'\nimport api from '../utils/api'\nimport Card from './Card'\nimport { CurrentUserContext } from '../contexts/CurrentUserContext'\n\nfunction Main(props) {\n\n    //   const [userName, setUserName] = React.useState('')\n    //   const [userDescription, setUserDescription] = React.useState('')\n    //   const [userAvatar, setUserAvatar] = React.useState('')\n    const [cards, setCards] = React.useState([])\n    const currentUser = React.useContext(CurrentUserContext);\n\n    function handleCardLike(card) {\n        // Снова проверяем, есть ли уже лайк на этой карточке\n        const isLiked = card.likes.some(i => i._id === currentUser._id);\n        // Отправляем запрос в API и получаем обновлённые данные карточки\n        api.changeLikeCardStatus(card._id, !isLiked)\n            .then((newCard) => {\n                setCards((state) => state.map((c) => c._id === card._id ? newCard : c));\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    }\n\n    function handleCardDelete(card) {\n        api.deleteCard(card._id)\n            .then(() => {\n                setCards((state) => state.filter((c) => c !== card))\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    }\n    //   React.useEffect(() => {\n    //     Promise.all([api.getUserInfo(), api.getCards()])\n    //       .then(([userData, cardsData]) => {\n    //         setUserName(userData.name)\n    //         setUserDescription(userData.about)\n    //         setUserAvatar(userData.avatar)\n    //         setCards(cardsData)\n    //       })\n    //       // Если сервер не ответил, выводим ошибку в консоль\n    //       .catch((err) => {\n    //         console.log(err)\n    //       })\n    //   }, [])\n\n    React.useEffect(() => {\n        api.getCards()\n            .then((apiData) => {\n                setCards(apiData)\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    }, [])\n\n\n    return (\n        <main>\n            <section className=\"profile\">\n                <div className=\"profile__container\">\n                    <div className=\"profile__photo-section\">\n                        <img className=\"profile__avatar\" alt=\"Аватар\" src={currentUser.avatar} onClick={props.onEditAvatar} />\n                        <button\n                            className=\"profile__icon\"\n                            type=\"button\"\n                            aria-label=\"Загрузка своего фото\"\n                        >\n                        </button>\n                    </div>\n                    <div className=\"profile__info\">\n                        <div className=\"profile__zone\">\n                            <h1 className=\"profile__title\">{currentUser.name}</h1>\n                            <button\n                                aria-label=\"Измените данные\"\n                                type=\"button\"\n                                className=\"profile__edit-button\"\n                                onClick={props.onEditProfile} >\n                            </button>\n                        </div>\n                        <p className=\"profile__caption\">{currentUser.about}</p>\n                    </div>\n                </div>\n                <button\n                    aria-label=\"Добавьте свою карточку!\"\n                    type=\"button\"\n                    className=\"profile__add-button\"\n                    onClick={props.onAddPlace} >\n                </button>\n            </section>\n            <section className=\"elements\">\n                {cards.map(card =>\n                    <Card\n                        key={card._id}\n                        card={card}\n                        onCardClick={props.onCardClick}\n                        onCardLike={handleCardLike}\n                        onCardDelete={handleCardDelete}\n                    />\n                )}\n            </section>\n        </main>\n    )\n}\n\nexport default Main","function Footer() {\n    return (\n        <footer className=\"footer\">\n            <p className=\"footer__copyright\">&copy; {new Date().getFullYear()} Mesto Russia</p>\n        </footer>\n    )\n}\n\nexport default Footer","import React from 'react'\n\nfunction PopupWithForm(props) {\n    return (\n        <div className={`popup ${props.isOpen && 'popup_active'}`}>\n            <div className=\"popup__container\">\n                <h2 className=\"popup__title\">{props.title}</h2>\n                <form\n                    name={props.name}\n                    className={`form form_type_${props.name}`}\n                    onSubmit={props.onSubmit}\n                    noValidate\n                >\n                    {props.children}\n                    <button type=\"submit\" className=\"form__save-button\">{props.saveButton}</button>\n                </form>\n                <button onClick={props.onClose} aria-label=\"Отменить изменения\" type=\"button\"\n                    className={`popup__close-button popup__close-button_type_${props.name}`} />\n            </div>\n        </div>\n    )\n}\n\nexport default PopupWithForm;\n","import React from 'react'\nimport PopupWithForm from './PopupWithForm'\nimport { CurrentUserContext } from '../contexts/CurrentUserContext'\n\nfunction EditProfilePopup(props) {\n\n    const [name, setName] = React.useState('')\n    const [description, setDescription] = React.useState('')\n\n    // Подписка на контекст\n    const currentUser = React.useContext(CurrentUserContext);\n\n    // После загрузки текущего пользователя из API\n    // его данные будут использованы в управляемых компонентах.\n    React.useEffect(() => {\n        setName(currentUser.name);\n        setDescription(currentUser.about);\n    }, [currentUser]);\n\n    function handleSubmit(e) {\n        // Запрещаем браузеру переходить по адресу формы\n        e.preventDefault();\n\n        // Передаём значения управляемых компонентов во внешний обработчик\n        props.onUpdateUser({\n            name: name,\n            about: description,\n        });\n    }\n\n    function handleChangeName(evt) {\n        setName(evt.target.value)\n    }\n\n    function handleChangeJob(evt) {\n        setDescription(evt.target.value)\n    }\n\n    return (\n        <PopupWithForm\n            name=\"edit\"\n            title=\"Редактировать профиль\"\n            isOpen={props.isOpen}\n            onClose={props.onClose}\n            onSubmit={handleSubmit}\n            saveButton=\"Сохранить\"\n        >\n            <input\n                type=\"text\" id=\"inputName\" name=\"inputName\"\n                placeholder=\"Введите Ваше имя\" \n                className=\"form__input form__input_type_name\"\n                minLength={2} maxLength={40} required\n                onChange={handleChangeName}\n            />\n            <span className=\"form__error\" id=\"inputName-error\" />\n            <input type=\"text\" id=\"inputJob\" name=\"inputJob\"\n                placeholder=\"Чем занимаетесь?\" \n                className=\"form__input form__input_type_job\"\n                minLength={2} maxLength={200} required \n                onChange={handleChangeJob}/>\n            <span className=\"form__error\" id=\"inputJob-error\" />\n        </PopupWithForm>\n\n        // <div className={`popup ${props.isOpen && 'popup_active'}`}>\n        //     <div className=\"popup__container\">\n        //         <h2 className=\"popup__title\">{props.title}</h2>\n        //         <form name={props.name} className={`form form_type_${props.name}`} noValidate>\n        //             {props.children}\n        //             <button type=\"submit\" className=\"form__save-button\">{props.saveButton}</button>\n        //         </form>\n        //         <button onClick={props.onClose} aria-label=\"Отменить изменения\" type=\"button\"\n        //             className={`popup__close-button popup__close-button_type_${props.name}`} />\n        //     </div>\n        // </div>\n    )\n}\n\nexport default EditProfilePopup;\n","import React from 'react'\nimport PopupWithForm from './PopupWithForm'\n\nfunction EditAvatarPopup(props) {\n\n    const userAvatarRef = React.useRef('');\n\n    function handleSubmit(evt) {\n        evt.preventDefault();\n        props.onUpdateAvatar({\n            avatar: userAvatarRef.current.value\n        });\n        // console.log(userAvatarRef.current.value)\n    }\n\n    return (\n        <PopupWithForm\n            name=\"avatar\"\n            title=\"Обновить аватар\"\n            isOpen={props.isOpen}\n            onClose={props.onClose}\n            saveButton=\"Сохранить\"\n            onSubmit={handleSubmit}\n        >\n            <input ref={userAvatarRef} type=\"url\" id=\"inputAvatar\"\n                name=\"inputAvatar\" placeholder=\"Ссылка на картинку\"\n                className=\"form__input form__input_type_addAvatar\"\n                required />\n            <span className=\"form__error\" id=\"inputAvatar-error\" />\n        </PopupWithForm>\n    )\n}\n\nexport default EditAvatarPopup;","import React from 'react'\n\nfunction ImagePopup({card, isOpen, onClose}) {\n    return (\n        <div className={`popup ${card && isOpen ? 'popup_active' : ''}`}>\n            <div className=\"popup__container popup__container_type_photo\">\n                <img className=\"popup__image\" src={`${card.link}`} alt={`Крупным планом ${card.name}`} />\n                <h2 className=\"popup__title popup__title_type_photo\">{card.name}</h2>\n                <button onClick={onClose}\n                    aria-label=\"Закрыть окно просмотра\" type=\"button\"\n                    className=\"popup__close-button popup__close-button_type_photo\" />\n            </div>\n        </div>\n    )\n}\n\nexport default ImagePopup","import React from 'react'\nimport '../index.css'\nimport Header from './Header'\nimport Main from './Main'\nimport Footer from './Footer'\nimport PopupWithForm from './PopupWithForm'\nimport EditProfilePopup from './EditProfilePopup'\nimport EditAvatarPopup from './EditAvatarPopup'\nimport ImagePopup from './ImagePopup'\nimport api from '../utils/api'\nimport { CurrentUserContext } from '../contexts/CurrentUserContext'\n\nfunction App() {\n\n    const [isEditAvatarPopupOpen, setEditAvatarPopupOpen] = React.useState(false)\n    const [isEditProfilePopupOpen, setEditProfilePopupOpen] = React.useState(false)\n    const [isAddPlacePopupOpen, setAddPlacePopupOpen] = React.useState(false)\n    const [isImagePopupOpen, setImagePopupOpen] = React.useState(false)\n    const [selectedCard, setSelectedCard] = React.useState({})\n    const [currentUser, setCurrentUser] = React.useState('')\n\n    React.useEffect(() => {\n        api.getUserInfo()\n            .then((userData) => {\n                setCurrentUser(userData)\n            })\n            // Если сервер не ответил, выводим ошибку в консоль\n            .catch((err) => {\n                console.log(err)\n            })\n    }, [])\n\n    function handleUpdateUser(userData) {\n        api.patchUserInfo(userData)\n            .then((userData) => {\n                setCurrentUser(userData)\n                // console.log(userData)\n                closeAllPopups()\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    }\n\n    function handleUpdateAvatar(userData) {\n        api.patchUserAvatar(userData)\n            .then((userData) => {\n                setCurrentUser(userData)\n                // console.log(userData)\n                closeAllPopups()\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    }\n\n    function handleEditAvatarClick() {\n        setEditAvatarPopupOpen(true)\n    }\n\n    function handleEditProfileClick() {\n        setEditProfilePopupOpen(true)\n    }\n\n    function handleAddPlaceClick() {\n        setAddPlacePopupOpen(true)\n    }\n\n    function handleCardClick(card) {\n        setSelectedCard(card)\n        setImagePopupOpen(true)\n    }\n\n    function closeAllPopups() {\n        setEditAvatarPopupOpen(false)\n        setEditProfilePopupOpen(false)\n        setAddPlacePopupOpen(false)\n        setImagePopupOpen(false)\n        setSelectedCard({})\n    }\n\n    return (\n        <div className=\"page__content\">\n            <CurrentUserContext.Provider value={currentUser}>\n                <Header />\n                <Main\n                    onEditProfile={handleEditProfileClick}\n                    onAddPlace={handleAddPlaceClick}\n                    onEditAvatar={handleEditAvatarClick}\n                    onCardClick={handleCardClick}\n                />\n                <Footer />\n                <EditProfilePopup\n                    isOpen={isEditProfilePopupOpen}\n                    onUpdateUser={handleUpdateUser}\n                    onClose={closeAllPopups}\n                />\n                {/* <PopupWithForm\n                    name=\"edit\"\n                    title=\"Редактировать профиль\"\n                    isOpen={isEditProfilePopupOpen}\n                    onClose={closeAllPopups}\n                    children={\n                        <>\n                            <input type=\"text\" id=\"inputName\" name=\"inputName\"\n                                placeholder=\"Введите Ваше имя\" className=\"form__input form__input_type_name\"\n                                minLength={2} maxLength={40} required />\n                            <span className=\"form__error\" id=\"inputName-error\" />\n                            <input type=\"text\" id=\"inputJob\" name=\"inputJob\"\n                                placeholder=\"Чем занимаетесь?\" className=\"form__input form__input_type_job\"\n                                minLength={2} maxLength={200} required />\n                            <span className=\"form__error\" id=\"inputJob-error\" />\n                        </>\n                    }\n                    saveButton=\"Сохранить\"\n                /> */}\n\n                <PopupWithForm\n                    name=\"add\"\n                    title=\"Новое место\"\n                    isOpen={isAddPlacePopupOpen}\n                    onClose={closeAllPopups}\n                    children={\n                        <>\n                            <input type=\"text\" id=\"inputAddTitle\" name=\"inputAddTitle\"\n                                placeholder=\"Название\" className=\"form__input form__input_type_addTitle\"\n                                minLength={2} maxLength={30} required />\n                            <span className=\"form__error\" id=\"inputAddTitle-error\" />\n                            <input type=\"url\" id=\"inputURL\" name=\"inputURL\"\n                                placeholder=\"Ссылка на картинку\" className=\"form__input form__input_type_addURL\" required />\n                            <span className=\"form__error\" id=\"inputURL-error\" />\n                        </>\n                    }\n                    saveButton=\"Сохранить\"\n                />\n\n                <PopupWithForm\n                    name=\"delete\"\n                    title=\"Вы уверены?\"\n                    onClose={closeAllPopups}\n                    children={\n                        <>\n                        </>\n                    }\n                    saveButton=\"Да\"\n                />\n\n                <EditAvatarPopup\n                    isOpen={isEditAvatarPopupOpen}\n                    onUpdateAvatar={handleUpdateAvatar}\n                    onClose={closeAllPopups}\n                />\n\n                {/* <PopupWithForm\n                    name=\"avatar\"\n                    title=\"Обновить аватар\"\n                    isOpen={isEditAvatarPopupOpen}\n                    onClose={closeAllPopups}\n                    children={\n                        <>\n                            <input type=\"url\" id=\"inputAvatar\" name=\"inputAvatar\"\n                                placeholder=\"Ссылка на картинку\" className=\"form__input form__input_type_addAvatar\" required />\n                            <span className=\"form__error\" id=\"inputAvatar-error\" />\n                        </>\n                    }\n                    saveButton=\"Сохранить\"\n                /> */}\n\n                <ImagePopup\n                    card={selectedCard}\n                    isOpen={isImagePopupOpen}\n                    onClose={closeAllPopups}\n                />\n            </CurrentUserContext.Provider>\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}